from abc import ABCMeta, abstractmethod
from config import config 


class Base(metaclass=ABCMeta):

    @abstractmethod
    def __init__(self):
        self.implements_callback = False 
        self.implements_verification = False 
        self.internal_name = ""

    @abstractmethod
    def verify(self, transaction_id:int) -> dict:
        """
        : transaction_id : The transaction Id as provided in the params above.
        : data : This is the complete response data from the payment gateway. It's kept in the system for reference purposes.
        : success : This is either True or False, depending on whether the payment was successful or not. 
        """
        return {"success": False, "data": {}, "transaction_id": transaction_id, "external_reference": ""} 

    @abstractmethod
    def parse_callback(self, request_data:dict) -> dict: 
        """
        Response information needed.
        : reference : This is the reference of the transaction generated by our system when sending request for 
                      for payment to the third party. Many payment gateways will call it something else. 
        : data : This is the complete response data from the payment gateway. It's kept in the system for reference purposes.
        : success : This is either True or False, depending on whether the payment was successful or not. 
        """
        return {"internal_reference": "", "data": {}, "success": False, "external_reference": ""}
 
    def get_callback_url(self):
        return config.BACKEND_URL + f"/billing/payment/{self.internal_name.lower()}/callback"
    